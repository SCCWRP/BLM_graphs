`10th percentile` = case_when(US_L3CODE == 8 ~ quantile(Result[US_L3CODE == 8], probs = 0.1)['10%'],
US_L3CODE == 85 ~ quantile(Result[US_L3CODE == 85], probs = 0.1)['10%']),
`25th percentile` = case_when(US_L3CODE == 8 ~ quantile(Result[US_L3CODE == 8], probs = 0.25)['25%'],
US_L3CODE == 85 ~ quantile(Result[US_L3CODE == 85], probs = 0.25)['25%']),
`median` = case_when(US_L3CODE == 8 ~ quantile(Result[US_L3CODE == 8], probs = 0.5)['50%'],
US_L3CODE == 85 ~ quantile(Result[US_L3CODE == 85], probs = 0.5)['50%']),
`75th percentile` = case_when(US_L3CODE == 8 ~ quantile(Result[US_L3CODE == 8], probs = 0.75)['75%'],
US_L3CODE == 85 ~ quantile(Result[US_L3CODE == 85], probs = 0.75)['75%']),
`90th percentile` = case_when(US_L3CODE == 8 ~ quantile(Result[US_L3CODE == 8], probs = 0.90)['90%'],
US_L3CODE == 85 ~ quantile(Result[US_L3CODE == 85], probs = 0.90)['90%'])) %>%
dplyr::mutate(US_L3CODE = as.character(US_L3CODE)) %>%
dplyr::select(data[data$US_L3CODE == 8][[1]])
data[data$US_L3CODE == 8][[1]]
data[data$US_L3CODE == 8]
data[data$US_L3CODE == 8,]
data[data$US_L3CODE == 8,][1]
data[data$US_L3CODE == 8,][[1]
]
data[data$US_L3CODE == 8,][[1]]
data[data$US_L3CODE == 8,]
data[data$US_L3CODE == 8,](1)
data[data$US_L3CODE == 8,1]
data[1, data$US_L3CODE == 8]
data[, data$US_L3CODE == 8]
data[data$US_L3CODE == 8,]
ggplot(data_no_outliers, aes(x = US_L3CODE, y = Result)) +
geom_boxplot(aes(ymin = quantile(Result, 0.10),
lower = quantile(Result, 0.25),
middle = quantile(Result, 0.50),
upper = quantile(Result, 0.75),
ymax = quantile(Result, 0.90)), stat = "identity")
# define the summary function
f <- function(x) {
r <- quantile(x, probs = c(0.10, 0.25, 0.5, 0.75, 0.90))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
# sample data
d <- data.frame(x=gl(2,50), y=rnorm(100))
# do it
ggplot(d, aes(x, y)) + stat_summary(fun.data = f, geom="boxplot")
# do it
ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot")
# example with outliers
# define outlier as you want
o <- function(x) {
subset(x, x < quantile(x)[2] | quantile(x)[4] < x)
}
# do it
ggplot(data, aes(x = US_L3CODE, y = Result)) +
stat_summary(fun.data=f, geom="boxplot") +
stat_summary(fun.y = o, geom="point")
# do it
ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot")
# create box plot
p <- ggplot(data, aes(x=US_L3CODE,y=Result))
# do it
p = p + geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) +
ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot")
# example with outliers
# define outlier as you want
o <- function(x) {
subset(x, x < quantile(x)[2] | quantile(x)[4] < x)
}
# do it
p = p + ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") + geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
)
# do it
ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") + geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
)
# do it
ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20))
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20))
# do it
ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20))
data <- data %>%
dplyr::filter(SimplifiedAnalyteName == analyte) %>%
# filter out any values for ecoregions that are not 8 or 85
dplyr::filter(US_L3CODE == c(8, 85)) %>%
dplyr::mutate(US_L3CODE = as.character(US_L3CODE))
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20))
print(p)
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20)) +
geom_segment(
x = 0.65, xend = 1.35, y = 300, yend = 300,
color = 'red',linetype = 'dashed'
) +
geom_segment(
x = 1.6, xend = 2.4, y = 350, yend = 350,
color = 'red',linetype = 'dashed'
)
print(p)
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20)) +
geom_segment(
x = 0.65, xend = 1.35, y = 300, yend = 300, size = 3,
color = 'red',linetype = 'dashed'
) +
geom_segment(
x = 1.6, xend = 2.4, y = 350, yend = 350,
color = 'red',linetype = 'dashed'
)
print(p)
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20)) +
geom_segment(
x = 0.65, xend = 1.35, y = 300, yend = 300, size = 2,
color = 'red',linetype = 'dashed'
) +
geom_segment(
x = 1.6, xend = 2.4, y = 350, yend = 350,
color = 'red',linetype = 'dashed'
)
print(p)
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20)) +
geom_segment(
x = 0.65, xend = 1.35, y = 300, yend = 300, size = 1,
color = 'red',linetype = 'dashed'
) +
geom_segment(
x = 1.6, xend = 2.4, y = 350, yend = 350,
color = 'red',linetype = 'dashed'
)
print(p)
# Create plots for all analytes of interest
for(analyte in analytes){
plotEco <- graphEco(analyte)
print(plotEco)
}
# define graphing function
## This function "cleans" the data and creates the appropriate box plots
graphEco <- function(analyte){
data <- data %>%
dplyr::filter(SimplifiedAnalyteName == analyte) %>%
# filter out any values for ecoregions that are not 8 or 85
dplyr::filter(US_L3CODE == c(8, 85)) %>%
dplyr::mutate(US_L3CODE = as.character(US_L3CODE))
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20)) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 0.65, xend = 1.35, y = 300, yend = 300, size = 1,
color = 'red',linetype = 'dashed'
) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 1.6, xend = 2.4, y = 350, yend = 350,
color = 'red',linetype = 'dashed'
)
print(p)
}
# ---------------------------------------------------------------------------------
# Load in data
data <- read.csv("data/FW BLM Database Ecoregion.csv", header = TRUE)
# List of all analytes
analytes = unique(data$SimplifiedAnalyteName)
# List of all ecoregions
ecoregions = unique(data$US_L3CODE)
# define the summary function
## This function ensures we compute the correct percentiles
f <- function(x) {
r <- quantile(x, probs = c(0.10, 0.25, 0.5, 0.75, 0.90))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
# define graphing function
## This function "cleans" the data and creates the appropriate box plots
graphEco <- function(analyte){
data <- data %>%
dplyr::filter(SimplifiedAnalyteName == analyte) %>%
# filter out any values for ecoregions that are not 8 or 85
dplyr::filter(US_L3CODE == c(8, 85)) %>%
dplyr::mutate(US_L3CODE = as.character(US_L3CODE))
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20)) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 0.65, xend = 1.35, y = 300, yend = 300, size = 1,
color = 'red',linetype = 'dashed'
) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 1.6, xend = 2.4, y = 350, yend = 350,
color = 'red',linetype = 'dashed'
)
print(p)
}
# Create plots for all analytes of interest
for(analyte in analytes){
plotEco <- graphEco(analyte)
print(plotEco)
}
# define graphing function
## This function "cleans" the data and creates the appropriate box plots
graphEco <- function(analyte){
data <- data %>%
dplyr::filter(SimplifiedAnalyteName == analyte) %>%
# filter out any values for ecoregions that are not 8 or 85
dplyr::filter(US_L3CODE == c(8, 85)) %>%
dplyr::mutate(US_L3CODE = as.character(US_L3CODE))
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[1], ")")) +
theme(text = element_text(size = 20)) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 0.65, xend = 1.35, y = 100, yend = 100, size = 1,
color = 'red',linetype = 'dashed'
) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 1.6, xend = 2.4, y = 100, yend = 100,
color = 'red',linetype = 'dashed'
)
}
# Create plots for all analytes of interest
for(analyte in analytes){
plotEco <- graphEco(analyte)
print(plotEco)
}
analytes
View(data)
# define graphing function
## This function "cleans" the data and creates the appropriate box plots
graphEco <- function(analyte){
data <- data %>%
dplyr::filter(SimplifiedAnalyteName == analyte) %>%
# filter out any values for ecoregions that are not 8 or 85
dplyr::filter(US_L3CODE == c(8, 85)) %>%
dplyr::mutate(US_L3CODE = as.character(US_L3CODE))
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[2], ")")) +
theme(text = element_text(size = 20)) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 0.65, xend = 1.35, y = 100, yend = 100, size = 1,
color = 'red',linetype = 'dashed'
) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 1.6, xend = 2.4, y = 100, yend = 100,
color = 'red',linetype = 'dashed'
)
}
# define graphing function
## This function "cleans" the data and creates the appropriate box plots
graphEco <- function(analyte){
data <- data %>%
dplyr::filter(SimplifiedAnalyteName == analyte) %>%
# filter out any values for ecoregions that are not 8 or 85
dplyr::filter(US_L3CODE == c(8, 85)) %>%
dplyr::mutate(US_L3CODE = as.character(US_L3CODE))
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[2], ")")) +
theme(text = element_text(size = 20)) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 0.65, xend = 1.35, y = 100, yend = 100, size = 1,
color = 'red',linetype = 'dashed'
) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 1.6, xend = 2.4, y = 100, yend = 100, size = 1,
color = 'red',linetype = 'dashed'
) # + ylim(#min, #max) <This is the code to "crop" the y-axis
}
# Create plots for all analytes of interest
for(analyte in analytes){
plotEco <- graphEco(analyte)
print(plotEco)
}
# EPA Estimate Values
# TODO: Will need to get these values from Ashley
EPA_est = 100
# define graphing function
## This function "cleans" the data and creates the appropriate box plots
graphEco <- function(analyte, EPA_est){
data <- data %>%
dplyr::filter(SimplifiedAnalyteName == analyte) %>%
# filter out any values for ecoregions that are not 8 or 85
dplyr::filter(US_L3CODE == c(8, 85)) %>%
dplyr::mutate(US_L3CODE = as.character(US_L3CODE))
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[2], ")")) +
theme(text = element_text(size = 20)) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 0.65, xend = 1.35, y = EPA_est, yend = EPA_est, size = 1,
color = 'red',linetype = 'dashed'
) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 1.6, xend = 2.4, y = EPA_est, yend = EPA_est, size = 1,
color = 'red',linetype = 'dashed'
) # + ylim(#min, #max) <This is the code to "crop" the y-axis
}
# Create plots for all analytes of interest
for(analyte in analytes){
plotEco <- graphEco(analyte)
print(plotEco)
}
# EPA Estimate Values
# TODO: Will need to get these values from Ashley
EPA_est = 100
# define graphing function
## This function "cleans" the data and creates the appropriate box plots
graphEco <- function(analyte, EPA_est){
data <- data %>%
dplyr::filter(SimplifiedAnalyteName == analyte) %>%
# filter out any values for ecoregions that are not 8 or 85
dplyr::filter(US_L3CODE == c(8, 85)) %>%
dplyr::mutate(US_L3CODE = as.character(US_L3CODE))
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[2], ")")) +
theme(text = element_text(size = 20)) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 0.65, xend = 1.35, y = EPA_est, yend = EPA_est, size = 1,
color = 'red',linetype = 'dashed'
) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 1.6, xend = 2.4, y = EPA_est, yend = EPA_est, size = 1,
color = 'red',linetype = 'dashed'
) # + ylim(#min, #max) <This is the code to "crop" the y-axis
}
# Create plots for all analytes of interest
for(analyte in analytes){
plotEco <- graphEco(analyte, EPA_est)
print(plotEco)
}
# load required libraries
library(tidyverse)
library(ggplot2)
# ---------------------------------------------------------------------------------
# Load in data
# TODO: Verify that this is the most up-to-date data
data <- read.csv("data/FW BLM Database Ecoregion.csv", header = TRUE)
# List of all analytes
analytes = unique(data$SimplifiedAnalyteName)
# List of all ecoregions
ecoregions = unique(data$US_L3CODE)
# EPA Estimate Values
# TODO: Will need to get these values from Ashley
EPA_est = 100
# define the summary function
## This function ensures we compute the correct percentiles
f <- function(x) {
r <- quantile(x, probs = c(0.10, 0.25, 0.5, 0.75, 0.90))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
# define graphing function
## This function "cleans" the data and creates the appropriate box plots
# TODO: Talk to Ashley about the y-axis limits. There are some outliers that throw off the scale.
# TODO: Talk to Ashley about the units for pH. We may need to manually go in and get rid of "None"
graphEco <- function(analyte, EPA_est){
data <- data %>%
dplyr::filter(SimplifiedAnalyteName == analyte) %>%
# filter out any values for ecoregions that are not 8 or 85
dplyr::filter(US_L3CODE == c(8, 85)) %>%
dplyr::mutate(US_L3CODE = as.character(US_L3CODE))
# create box plot
p <- ggplot(data, aes(x = US_L3CODE, y = Result)) + stat_summary(fun.data = f, geom="boxplot") +
stat_boxplot(geom = "errorbar", width = 0.4) +
geom_jitter(
color = '#0066ff',
alpha = 0.4,
width = 0.4
) + labs(x = "US EPA Level III Ecoregion",
y = paste(analyte, "(", data$Unit[2], ")")) +
theme(text = element_text(size = 20)) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 0.65, xend = 1.35, y = EPA_est, yend = EPA_est, size = 1,
color = 'red',linetype = 'dashed'
) +
# change the values y and yend to the appropriate EPA Estimate Values
geom_segment(
x = 1.6, xend = 2.4, y = EPA_est, yend = EPA_est, size = 1,
color = 'red',linetype = 'dashed'
) # + ylim(#min, #max) <This is the code to "crop" the y-axis
}
# Create plots for all analytes of interest
for(analyte in analytes){
plotEco <- graphEco(analyte, EPA_est)
print(plotEco)
}
